/**
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as React from "react";
import { Thing, WithContext } from "schema-dts";
interface JsonLdOptions {
    /** Adds indentation, white space, and line break characters to JSON-LD output. {@link JSON.stringify} */
    space?: string | number;
}
/**
 * Component that inline-includes a JSON-LD script where specified.
 *
 * For Example:
 *
 * ```tsx
 * <JsonLd<Person>
 *   item={{
 *     "@context": "https://schema.org",
 *     "@type": "Person",
 *     name: "Grace Hopper",
 *     alternateName: "Grace Brewster Murray Hopper",
 *     alumniOf: {
 *       "@type": "CollegeOrUniversity",
 *       name: ["Yale University", "Vassar College"]
 *     },
 *     knowsAbout: ["Compilers", "Computer Science"]
 *   }}
 *   space={2}
 * />
 * ```
 */
export declare class JsonLd<T extends Thing> extends React.Component<JsonLdOptions & {
    item: WithContext<T>;
}> {
    render(): JSX.Element;
}
/**
 * Produces necessary props for a JSX <script> tag that includes JSON-LD.
 *
 * Can be used by spreading the props into a <script> JSX tag:
 *
 * ```tsx
 * <script {...jsonLdScriptProps<Person>({
 *   "@context": "https://schema.org",
 *   "@type": "Person",
 *   name: "Grace Hopper",
 *   alternateName: "Grace Brewster Murray Hopper",
 *   alumniOf: {
 *     "@type": "CollegeOrUniversity",
 *     name: ["Yale University", "Vassar College"]
 *   },
 *   knowsAbout: ["Compilers", "Computer Science"]
 * })} />
 * ```
 */
export declare function jsonLdScriptProps<T extends Thing>(item: WithContext<T>, options?: JsonLdOptions): JSX.IntrinsicElements["script"];
/**
 * Produces a Helmet-style <script> prop for a given JSON-LD datum.
 *
 * For example:
 *
 * ```tsx
 * <Helmet script={[
 *     helmetJsonLdProp<Person>({
 *         "@context": "https://schema.org",
 *         "@type": "Person",
 *         name: "Grace Hopper",
 *         alternateName: "Grace Brewster Murray Hopper",
 *         alumniOf: {
 *           "@type": "CollegeOrUniversity",
 *           name: ["Yale University", "Vassar College"]
 *         },
 *         knowsAbout: ["Compilers", "Computer Science"]
 *     }),
 * ]} />
 * ```
 */
export declare const helmetJsonLdProp: <T extends Thing>(item: WithContext<T>, options?: JsonLdOptions) => {
    type: "application/ld+json";
    innerHTML: string;
};
export {};
