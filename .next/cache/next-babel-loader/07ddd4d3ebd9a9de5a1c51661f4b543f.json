{"ast":null,"code":"var _jsxFileName = \"/home/adelson/dev/new-blog/src/pages/posts/page/[page].tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from \"../../../components/Layout\";\nimport BasicMeta from \"../../../components/meta/BasicMeta\";\nimport OpenGraphMeta from \"../../../components/meta/OpenGraphMeta\";\nimport TwitterCardMeta from \"../../../components/meta/TwitterCardMeta\";\nimport PostList from \"../../../components/PostList\";\nimport config from \"../../../lib/config\";\nimport { countPosts, listPostContent } from \"../../../lib/posts\";\nimport { listTags } from \"../../../lib/tags\";\nexport default function Page({\n  posts,\n  tags,\n  pagination,\n  page\n}) {\n  const url = `/posts/page/${page}`;\n  const title = \"All posts\";\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, __jsx(BasicMeta, {\n    url: url,\n    title: title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }), __jsx(OpenGraphMeta, {\n    url: url,\n    title: title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }), __jsx(TwitterCardMeta, {\n    url: url,\n    title: title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }), __jsx(PostList, {\n    posts: posts,\n    tags: tags,\n    pagination: pagination,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }));\n}\nexport const getStaticProps = async ({\n  params\n}) => {\n  const page = parseInt(params.page);\n  const posts = listPostContent(page, config.posts_per_page);\n  const tags = listTags();\n  const pagination = {\n    current: page,\n    pages: Math.ceil(countPosts() / config.posts_per_page)\n  };\n  return {\n    props: {\n      page,\n      posts,\n      tags,\n      pagination\n    }\n  };\n};\nexport const getStaticPaths = async () => {\n  const pages = Math.ceil(countPosts() / config.posts_per_page);\n  const paths = Array.from(Array(pages - 1).keys()).map(it => ({\n    params: {\n      page: (it + 2).toString()\n    }\n  }));\n  return {\n    paths: paths,\n    fallback: false\n  };\n};","map":{"version":3,"sources":["/home/adelson/dev/new-blog/src/pages/posts/page/[page].tsx"],"names":["Layout","BasicMeta","OpenGraphMeta","TwitterCardMeta","PostList","config","countPosts","listPostContent","listTags","Page","posts","tags","pagination","page","url","title","getStaticProps","params","parseInt","posts_per_page","current","pages","Math","ceil","props","getStaticPaths","paths","Array","from","keys","map","it","toString","fallback"],"mappings":";;;AAEA,OAAOA,MAAP,MAAmB,4BAAnB;AACA,OAAOC,SAAP,MAAsB,oCAAtB;AACA,OAAOC,aAAP,MAA0B,wCAA1B;AACA,OAAOC,eAAP,MAA4B,0CAA5B;AACA,OAAOC,QAAP,MAAqB,8BAArB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SAASC,UAAT,EAAqBC,eAArB,QAAyD,oBAAzD;AACA,SAASC,QAAT,QAAqC,mBAArC;AAWA,eAAe,SAASC,IAAT,CAAc;AAAEC,EAAAA,KAAF;AAASC,EAAAA,IAAT;AAAeC,EAAAA,UAAf;AAA2BC,EAAAA;AAA3B,CAAd,EAAwD;AACrE,QAAMC,GAAG,GAAI,eAAcD,IAAK,EAAhC;AACA,QAAME,KAAK,GAAG,WAAd;AACA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAW,IAAA,GAAG,EAAED,GAAhB;AAAqB,IAAA,KAAK,EAAEC,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,aAAD;AAAe,IAAA,GAAG,EAAED,GAApB;AAAyB,IAAA,KAAK,EAAEC,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE,MAAC,eAAD;AAAiB,IAAA,GAAG,EAAED,GAAtB;AAA2B,IAAA,KAAK,EAAEC,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAIE,MAAC,QAAD;AAAU,IAAA,KAAK,EAAEL,KAAjB;AAAwB,IAAA,IAAI,EAAEC,IAA9B;AAAoC,IAAA,UAAU,EAAEC,UAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF;AAQD;AAED,OAAO,MAAMI,cAA8B,GAAG,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAsB;AAClE,QAAMJ,IAAI,GAAGK,QAAQ,CAACD,MAAM,CAACJ,IAAR,CAArB;AACA,QAAMH,KAAK,GAAGH,eAAe,CAACM,IAAD,EAAOR,MAAM,CAACc,cAAd,CAA7B;AACA,QAAMR,IAAI,GAAGH,QAAQ,EAArB;AACA,QAAMI,UAAU,GAAG;AACjBQ,IAAAA,OAAO,EAAEP,IADQ;AAEjBQ,IAAAA,KAAK,EAAEC,IAAI,CAACC,IAAL,CAAUjB,UAAU,KAAKD,MAAM,CAACc,cAAhC;AAFU,GAAnB;AAIA,SAAO;AACLK,IAAAA,KAAK,EAAE;AACLX,MAAAA,IADK;AAELH,MAAAA,KAFK;AAGLC,MAAAA,IAHK;AAILC,MAAAA;AAJK;AADF,GAAP;AAQD,CAhBM;AAkBP,OAAO,MAAMa,cAA8B,GAAG,YAAY;AACxD,QAAMJ,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUjB,UAAU,KAAKD,MAAM,CAACc,cAAhC,CAAd;AACA,QAAMO,KAAK,GAAGC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACN,KAAK,GAAG,CAAT,CAAL,CAAiBQ,IAAjB,EAAX,EAAoCC,GAApC,CAAyCC,EAAD,KAAS;AAC7Dd,IAAAA,MAAM,EAAE;AAAEJ,MAAAA,IAAI,EAAE,CAACkB,EAAE,GAAG,CAAN,EAASC,QAAT;AAAR;AADqD,GAAT,CAAxC,CAAd;AAGA,SAAO;AACLN,IAAAA,KAAK,EAAEA,KADF;AAELO,IAAAA,QAAQ,EAAE;AAFL,GAAP;AAID,CATM","sourcesContent":["import { GetStaticPaths, GetStaticProps } from \"next\";\nimport Head from \"next/head\";\nimport Layout from \"../../../components/Layout\";\nimport BasicMeta from \"../../../components/meta/BasicMeta\";\nimport OpenGraphMeta from \"../../../components/meta/OpenGraphMeta\";\nimport TwitterCardMeta from \"../../../components/meta/TwitterCardMeta\";\nimport PostList from \"../../../components/PostList\";\nimport config from \"../../../lib/config\";\nimport { countPosts, listPostContent, PostContent } from \"../../../lib/posts\";\nimport { listTags, TagContent } from \"../../../lib/tags\";\n\ntype Props = {\n  posts: PostContent[];\n  tags: TagContent[];\n  page: number;\n  pagination: {\n    current: number;\n    pages: number;\n  };\n};\nexport default function Page({ posts, tags, pagination, page }: Props) {\n  const url = `/posts/page/${page}`;\n  const title = \"All posts\";\n  return (\n    <Layout>\n      <BasicMeta url={url} title={title} />\n      <OpenGraphMeta url={url} title={title} />\n      <TwitterCardMeta url={url} title={title} />\n      <PostList posts={posts} tags={tags} pagination={pagination} />\n    </Layout>\n  );\n}\n\nexport const getStaticProps: GetStaticProps = async ({ params }) => {\n  const page = parseInt(params.page as string);\n  const posts = listPostContent(page, config.posts_per_page);\n  const tags = listTags();\n  const pagination = {\n    current: page,\n    pages: Math.ceil(countPosts() / config.posts_per_page),\n  };\n  return {\n    props: {\n      page,\n      posts,\n      tags,\n      pagination,\n    },\n  };\n};\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n  const pages = Math.ceil(countPosts() / config.posts_per_page);\n  const paths = Array.from(Array(pages - 1).keys()).map((it) => ({\n    params: { page: (it + 2).toString() },\n  }));\n  return {\n    paths: paths,\n    fallback: false,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}